[{"D:\\Project\\ygocarder\\src\\index.js":"1","D:\\Project\\ygocarder\\src\\reportWebVitals.js":"2","D:\\Project\\ygocarder\\src\\app.tsx":"3","D:\\Project\\ygocarder\\src\\page\\index.tsx":"4","D:\\Project\\ygocarder\\src\\draw\\index.ts":"5","D:\\Project\\ygocarder\\src\\const\\index.tsx":"6","D:\\Project\\ygocarder\\src\\model\\index.tsx":"7","D:\\Project\\ygocarder\\src\\util\\index.tsx":"8","D:\\Project\\ygocarder\\src\\draw\\type-ability.ts":"9","D:\\Project\\ygocarder\\src\\draw\\predefine.ts":"10","D:\\Project\\ygocarder\\src\\draw\\util.ts":"11","D:\\Project\\ygocarder\\src\\draw\\text.ts":"12","D:\\Project\\ygocarder\\src\\draw\\image.ts":"13","D:\\Project\\ygocarder\\src\\const\\size.ts":"14","D:\\Project\\ygocarder\\src\\const\\position.ts":"15","D:\\Project\\ygocarder\\src\\util\\condenser.ts":"16","D:\\Project\\ygocarder\\src\\util\\categorize.tsx":"17","D:\\Project\\ygocarder\\src\\page\\input-panel\\index.tsx":"18","D:\\Project\\ygocarder\\src\\page\\app-header\\index.tsx":"19","D:\\Project\\ygocarder\\src\\3rd\\index.ts":"20","D:\\Project\\ygocarder\\src\\page\\input-panel\\const.tsx":"21","D:\\Project\\ygocarder\\src\\component\\index.tsx":"22","D:\\Project\\ygocarder\\src\\page\\input-panel\\input-train\\index.tsx":"23","D:\\Project\\ygocarder\\src\\page\\input-panel\\style-picker\\index.tsx":"24","D:\\Project\\ygocarder\\src\\page\\input-panel\\char-picker\\index.tsx":"25","D:\\Project\\ygocarder\\src\\component\\link-marker\\index.tsx":"26","D:\\Project\\ygocarder\\src\\component\\card-picture\\index.tsx":"27","D:\\Project\\ygocarder\\src\\component\\loading\\index.tsx":"28","D:\\Project\\ygocarder\\src\\model\\canvas.ts":"29","D:\\Project\\ygocarder\\src\\model\\card-seri.tsx":"30","D:\\Project\\ygocarder\\src\\service\\index.tsx":"31","D:\\Project\\ygocarder\\src\\service\\master-seri.tsx":"32"},{"size":510,"mtime":1615011759183,"results":"33","hashOfConfig":"34"},{"size":404,"mtime":1610181300618,"results":"35","hashOfConfig":"34"},{"size":16869,"mtime":1650093441081,"results":"36","hashOfConfig":"34"},{"size":193,"mtime":1617413849779,"results":"37","hashOfConfig":"34"},{"size":137,"mtime":1617284160016,"results":"38","hashOfConfig":"34"},{"size":353,"mtime":1616917515531,"results":"39","hashOfConfig":"34"},{"size":4157,"mtime":1650092897395,"results":"40","hashOfConfig":"34"},{"size":2489,"mtime":1636161604035,"results":"41","hashOfConfig":"34"},{"size":5185,"mtime":1616218007829,"results":"42","hashOfConfig":"34"},{"size":4284,"mtime":1618321863477,"results":"43","hashOfConfig":"34"},{"size":2975,"mtime":1650089395852,"results":"44","hashOfConfig":"34"},{"size":16851,"mtime":1655639398994,"results":"45","hashOfConfig":"34"},{"size":2895,"mtime":1649650261800,"results":"46","hashOfConfig":"34"},{"size":3711,"mtime":1617376501501,"results":"47","hashOfConfig":"34"},{"size":748,"mtime":1616917560463,"results":"48","hashOfConfig":"34"},{"size":5627,"mtime":1651493116884,"results":"49","hashOfConfig":"34"},{"size":675,"mtime":1650092877754,"results":"50","hashOfConfig":"34"},{"size":17558,"mtime":1650092897395,"results":"51","hashOfConfig":"34"},{"size":3204,"mtime":1617420077564,"results":"52","hashOfConfig":"34"},{"size":1741,"mtime":1617376501500,"results":"53","hashOfConfig":"34"},{"size":1501,"mtime":1636165876455,"results":"54","hashOfConfig":"34"},{"size":96,"mtime":1616216014660,"results":"55","hashOfConfig":"34"},{"size":1387,"mtime":1617288122916,"results":"56","hashOfConfig":"34"},{"size":11603,"mtime":1619278269963,"results":"57","hashOfConfig":"34"},{"size":3030,"mtime":1617032646942,"results":"58","hashOfConfig":"34"},{"size":2084,"mtime":1616293508715,"results":"59","hashOfConfig":"34"},{"size":7504,"mtime":1655639383671,"results":"60","hashOfConfig":"34"},{"size":237,"mtime":1610249200959,"results":"61","hashOfConfig":"34"},{"size":67,"mtime":1649650349456,"results":"62","hashOfConfig":"34"},{"size":990,"mtime":1650082638434,"results":"63","hashOfConfig":"64"},{"size":52,"mtime":1650089187392,"results":"65","hashOfConfig":"34"},{"size":16428,"mtime":1650093179392,"results":"66","hashOfConfig":"34"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},"fajpj6",{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"121","messages":"122","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"74"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},"10eszbj",{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"D:\\Project\\ygocarder\\src\\index.js",[],["136","137"],"D:\\Project\\ygocarder\\src\\reportWebVitals.js",[],"D:\\Project\\ygocarder\\src\\app.tsx",[],["138","139"],"D:\\Project\\ygocarder\\src\\page\\index.tsx",[],"D:\\Project\\ygocarder\\src\\draw\\index.ts",[],"D:\\Project\\ygocarder\\src\\const\\index.tsx",[],"D:\\Project\\ygocarder\\src\\model\\index.tsx",[],"D:\\Project\\ygocarder\\src\\util\\index.tsx",[],"D:\\Project\\ygocarder\\src\\draw\\type-ability.ts",[],"D:\\Project\\ygocarder\\src\\draw\\predefine.ts",[],"D:\\Project\\ygocarder\\src\\draw\\util.ts",[],"D:\\Project\\ygocarder\\src\\draw\\text.ts",[],"D:\\Project\\ygocarder\\src\\draw\\image.ts",[],"D:\\Project\\ygocarder\\src\\const\\size.ts",[],"D:\\Project\\ygocarder\\src\\const\\position.ts",[],"D:\\Project\\ygocarder\\src\\util\\condenser.ts",[],"D:\\Project\\ygocarder\\src\\util\\categorize.tsx",[],"D:\\Project\\ygocarder\\src\\page\\input-panel\\index.tsx",[],"D:\\Project\\ygocarder\\src\\page\\app-header\\index.tsx",[],"D:\\Project\\ygocarder\\src\\3rd\\index.ts",[],"D:\\Project\\ygocarder\\src\\page\\input-panel\\const.tsx",[],"D:\\Project\\ygocarder\\src\\component\\index.tsx",[],"D:\\Project\\ygocarder\\src\\page\\input-panel\\input-train\\index.tsx",[],"D:\\Project\\ygocarder\\src\\page\\input-panel\\style-picker\\index.tsx",[],"D:\\Project\\ygocarder\\src\\page\\input-panel\\char-picker\\index.tsx",[],"D:\\Project\\ygocarder\\src\\component\\link-marker\\index.tsx",[],"D:\\Project\\ygocarder\\src\\component\\card-picture\\index.tsx",["140"],"import { Button, Input, Radio } from 'antd';\r\nimport React, { useState, useCallback, useRef, useEffect, useImperativeHandle } from 'react';\r\nimport ReactCrop from 'react-image-crop';\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\nimport { Loading } from '../loading';\r\nimport './card-picture.scss';\r\n\r\nfunction generateDownload(canvas: HTMLCanvasElement | null, crop: ReactCrop.Crop | null) {\r\n    if (!crop || !canvas) return;\r\n    canvas.toBlob(\r\n        (blob) => {\r\n            if (blob !== null) {\r\n                const previewUrl = window.URL.createObjectURL(blob);\r\n\r\n                const anchor = document.createElement('a');\r\n                anchor.download = 'cropPreview.png';\r\n                anchor.href = URL.createObjectURL(blob);\r\n                anchor.click();\r\n\r\n                window.URL.revokeObjectURL(previewUrl);\r\n            }\r\n        },\r\n        'image/png',\r\n        1\r\n    );\r\n}\r\n\r\nexport type ImageCropperRef = {\r\n    forceExternalSource: (pictureLink: string, cropInfo: Partial<ReactCrop.Crop>) => void,\r\n}\r\nexport type ImageCropper = {\r\n    noRedrawNumber?: number,\r\n    defaultExternalSource?: string,\r\n    previewCanvasRef?: HTMLCanvasElement | null,\r\n    children?: React.ReactNode,\r\n    ratio?: number,\r\n    defaultCropInfo: Partial<ReactCrop.Crop>,\r\n    onSourceChange?: (source: string) => void,\r\n    onImageChange?: (cropInfo: Partial<ReactCrop.Crop>, sourceType: 'internal' | 'external') => void,\r\n    onTainted: () => void,\r\n}\r\nexport const ImageCropper = React.forwardRef<ImageCropperRef, ImageCropper>(({\r\n    noRedrawNumber = 0,\r\n    defaultExternalSource = '',\r\n    previewCanvasRef,\r\n    children,\r\n    ratio = 1,\r\n    defaultCropInfo,\r\n    onSourceChange = () => { },\r\n    onImageChange = () => { },\r\n    onTainted = () => { },\r\n}: ImageCropper, forwardedRef) => {\r\n    const [crossorigin, setCrossOrigin] = useState<'anonymous' | 'use-credentials' | undefined>('anonymous');\r\n    const [sourceType, setSourceType] = useState<'internal' | 'external'>('external');\r\n    const [internalSource, setInternalSource] = useState('');\r\n    const [isLoading, setLoading] = useState(false);\r\n    const [externalSource, setExternalSource] = useState(defaultExternalSource);\r\n    const imgRef = useRef<HTMLImageElement | null>(null);\r\n    const [crop, setCrop] = useState<ReactCrop.Crop>(defaultCropInfo);\r\n    const [completedCrop, setCompletedCrop] = useState<ReactCrop.Crop | null>(null);\r\n\r\n    const onSelectFile = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length > 0) {\r\n            setLoading(true);\r\n            const reader = new FileReader();\r\n            reader.addEventListener('load', () => {\r\n                if (typeof reader.result === 'string') {\r\n                    setInternalSource(reader.result);\r\n                    setSourceType('internal');\r\n                }\r\n            });\r\n            reader.readAsDataURL(e.target.files[0]);\r\n        }\r\n    };\r\n\r\n    const onLoad = useCallback((img: HTMLImageElement) => {\r\n        setLoading(false);\r\n        imgRef.current = img;\r\n    }, []);\r\n\r\n    const onExternalSourceChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const source = e.target.value;\r\n\r\n        setLoading(true);\r\n        setSourceType('external');\r\n        onSourceChange(source);\r\n        setExternalSource(source);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const image = imgRef.current;\r\n        const canvas = previewCanvasRef;\r\n        const crop = completedCrop;\r\n        if (!crop || !canvas || !image) return;\r\n\r\n        const ctx = canvas.getContext('2d');\r\n        if (!ctx) return;\r\n\r\n        const scaleX = image.naturalWidth / image.width;\r\n        const scaleY = image.naturalHeight / image.height;\r\n        const pixelRatio = window.devicePixelRatio;\r\n        const boundingWidth = Math.ceil(canvas.getBoundingClientRect().width);\r\n        const boundingHeight = Math.ceil(canvas.getBoundingClientRect().height);\r\n\r\n        canvas.width = (boundingWidth ?? 0) * pixelRatio;\r\n        canvas.height = (boundingHeight ?? 0) * pixelRatio;\r\n\r\n        ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\r\n        ctx.imageSmoothingQuality = 'high';\r\n\r\n        ctx.drawImage(\r\n            image,\r\n            (crop.x ?? 0) * scaleX,\r\n            (crop.y ?? 0) * scaleY,\r\n            (crop.width ?? 0) * scaleX,\r\n            (crop.height ?? 0) * scaleY,\r\n            0,\r\n            0,\r\n            (boundingWidth ?? 0),\r\n            (boundingHeight ?? 0)\r\n        );\r\n        onImageChange(crop, sourceType);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [completedCrop, previewCanvasRef, noRedrawNumber]);\r\n\r\n    useImperativeHandle(forwardedRef, () => ({\r\n        forceExternalSource: (source, cropInfo) => {\r\n            const inUseSource = sourceType === 'internal' ? internalSource : externalSource;\r\n            if (inUseSource !== source) {\r\n                setLoading(true);\r\n                setSourceType('external');\r\n                onSourceChange(source);\r\n                setExternalSource(source);\r\n            }\r\n            setCrop(cropInfo);\r\n        }\r\n    }));\r\n\r\n    return (\r\n        <div className=\"card-image-cropper\">\r\n            <div className=\"card-image-source-input\">\r\n                {children}\r\n                <Radio.Group onChange={e => setSourceType(e.target.value)} value={sourceType}>\r\n                    <Radio.Button value={'external'}>\r\n                        <Input key=\"key\"\r\n                            addonBefore=\"Link\" placeholder=\"https://my-online-image...\"\r\n                            value={externalSource}\r\n                            onChange={onExternalSourceChange} maxLength={256} />\r\n                    </Radio.Button>\r\n                    <Radio.Button value={'internal'}>\r\n                        <Input type=\"file\" accept=\"image/*\" onChange={onSelectFile} />\r\n                        <div>\r\n                            {sourceType === 'internal' && <>\r\n                                <Button\r\n                                    className=\"download-button\"\r\n                                    disabled={!completedCrop?.width || !completedCrop?.height}\r\n                                    onClick={() => previewCanvasRef && generateDownload(previewCanvasRef, completedCrop)}\r\n                                >\r\n                                    Download cropped image#3b9dff\r\n                                </Button>\r\n                                <span style={{ color: '#FF6F6F' }}>Offline images are not auto saved!</span>\r\n                            </>}\r\n                        </div>\r\n                    </Radio.Button>\r\n                </Radio.Group>\r\n            </div>\r\n            <div className=\"card-cropper\">\r\n                {isLoading && <Loading.FullView />}\r\n                <ReactCrop key={sourceType}\r\n                    src={sourceType === 'internal' ? internalSource : externalSource}\r\n                    onImageLoaded={onLoad}\r\n                    onImageError={() => {\r\n                        onTainted();\r\n                        setCrossOrigin(undefined);\r\n                    }}\r\n                    crop={crop}\r\n                    onChange={cropData => setCrop({ ...cropData, aspect: ratio })}\r\n                    onComplete={cropData => setCompletedCrop(cropData)}\r\n                    ruleOfThirds={true}\r\n                    crossorigin={crossorigin}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n","D:\\Project\\ygocarder\\src\\component\\loading\\index.tsx",[],["141","142"],"D:\\Project\\ygocarder\\src\\model\\canvas.ts",[],"D:\\Project\\ygocarder\\src\\model\\card-seri.tsx",[],["143","144"],"D:\\Project\\ygocarder\\src\\service\\index.tsx",[],"D:\\Project\\ygocarder\\src\\service\\master-seri.tsx",[],{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","replacedBy":"148"},{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","replacedBy":"148"},{"ruleId":null,"fatal":true,"severity":2,"message":"149","line":12,"column":0},{"ruleId":"145","replacedBy":"150"},{"ruleId":"147","replacedBy":"151"},{"ruleId":"145","replacedBy":"152"},{"ruleId":"147","replacedBy":"153"},"no-native-reassign",["154"],"no-negated-in-lhs",["155"],"Parsing error: Merge conflict marker encountered.",["154"],["155"],["154"],["155"],"no-global-assign","no-unsafe-negation"]